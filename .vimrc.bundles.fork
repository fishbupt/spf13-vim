Bundle 'rhysd/vim-clang-format'
let g:clang_format#command = "clang-format"
let g:clang_format#style_options = {
            \ "AccessModifierOffset" : -4,
            \ "AllowShortIfStatementsOnASingleLine" : "true",
            \ "AlwaysBreakTemplateDeclarations" : "true",
            \ "Standard" : "C++11"}

" map to <Leader>cf in C++ code
autocmd FileType c,cpp,cc,h,hpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,cc,h,hpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>
" if you install vim-operator-user
autocmd FileType c,cpp,objc map <buffer><Leader>x <Plug>(operator-clang-format)
" Toggle auto formatting:
nmap <Leader>C :ClangFormatAutoToggle<CR>

let g:spf13_no_big_font=1

" YCM-Generator
Bundle 'rdnetto/YCM-Generator'

" Fold
Bundle 'Konfekt/FastFold'
Bundle 'Konfekt/FoldText'

UnBundle 'scrooloose/syntastic'
UnBundle 'bling/vim-bufferline'

" neomake
Bundle 'neomake/neomake'
autocmd! BufWritePost *Neomake

Bundle 'Shougo/deoplete.nvim', {'do': ':UpdateRemotePlugins'}

" buffer explorer
Bundle 'jeetsukumaran/vim-buffergator'

" replace ctrlp with fzf
UnBundle 'ctrlpvim/ctrlp.vim'
UnBundle 'tacahiroy/ctrlp-funky'

Bundle 'junegunn/fzf', {'dir': '~/.fzf', 'do': './install -all'}
Bundle 'junegunn/fzf.vim'
" {{{
 if has('nvim')
   let $FZF_DEFAULT_COMMAND = 'ag -l -g ""'
   let $FZF_DEFAULT_OPTS .= ' --inline-info'
 endif

" File preview using Hightlight
 let g:fzf_files_options = 
       \'--preview "(highlight -O ansi {} || cat {}) 2> /dev/null | head -'.&lines.'"'

 " [Buffers] Jump to the existing window if possible
 let g:fzf_buffers_jump = 1

 " [[B]Commits] Customize the options used by 'git log'
 let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr---%cn"'

 " [Tags] Command to generate tags file
 let g:fzf_tags_command = 'ctags -R'

 " Key mapping
map <C-p> :Files<cr>
map <C-o> :Buffers<cr>

nmap <leader>c :Commits<cr>

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" }}}
"
" Ack key maps
nnoremap <F12> :Ack<CR>

